(ns uawa.core);; (use 'uawa.core);; макроси(defmacro визначення "див. def" [символ документація значення] `(def ~символ ~документація ~значення))(defmacro постійна "див. defonce" [назва значення] `(let [v# (def ~назва)](when-not (.hasRoot v#) (def ~назва ~значення))))(defmacro функція "див. defn" [назви & описи] (list* `defn (with-meta назви (assoc (meta назви) :private false)) описи))(defmacro запис "див. defrecord" [name fields & opt] `(defrecord ~name ~fields ~@opt))(defmacro якщо "див. if"([умова то] `(if ~умова ~то nil)) ([умова то інакше] `(if ~умова ~то ~інакше)))(defmacro для "див. for" [set-expr body-expr] `(for ~set-expr body-expr));; колекції(функція пусто? "див. empty" [колекція] (empty? колекція))(функція відфільтруй-різні "див. distinct" [колекція] (distinct колекція))(функція розмір "див count" [колекція] (count колекція))(функція фільтруй [pred] (filter pred))(функція фільтруй [pred coll] (filter pred coll))(функція відобрази "див. map" [функція] (map функція))(функція відобрази "див. map" [функція список] (map функція список));; TODO додати від кількох колекцій(функція зменш "див. reduce" [функція колекція] (reduce функція колекція))(функція зменш "див. reduce" [функція значення колекція] (reduce функція значення колекція))(defmacro .отримай "див. .get" [обєкт назва-поля] `(.get ~обєкт ~назва-поля));; умови (постійна істина true)(постійна фальш false) (функція ні? "not" [x] (not x))(функція та? "and" ([x y] (and x y)) ([x y & більше] (зменш та? (та? x y) більше)))(функція кожен? "див. every?" ([умова колекція] (every? умова колекція)))(функція або? "or" ([x y] (or x y)) ([x y & більше] (зменш або? (або? x y) більше)));; системні(функція вихід ([] (вихід 0)) ([статус] (System/exit статус)))(defn використай [& args] (use args));; різні(функція дай-випадкове "див. rand-int" [максимальне] (rand-int максимальне))(функція друкуй "див. println" [& більше]  (binding [*print-readably* nil] (apply prn більше)))